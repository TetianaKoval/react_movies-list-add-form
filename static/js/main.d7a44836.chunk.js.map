{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","isValid","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","pattern","NewMovie","props","count","changeCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","imgUrlIsValid","tougleValidImgUrl","imdbUrlIsValid","tougleValidImdbUrl","onAdd","formFilledEnough","Boolean","length","onSubmit","preventDefault","prev","search","disabled","App","moviesFromServer","newMoviesList","addNewMovie","prevList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7a44836.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport './TextField.scss';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isValid?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  isValid,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          }, { 'not-valid': !isValid })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            onChange(event.target.value);\n          }}\n          onBlur={() => {\n            setToched(true);\n          }}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {!isValid && (\n        <p className=\"explanation not-valid\">{`${label} isn't valid`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie:Movie) => void,\n};\n\n/* eslint max-len: [\"error\", { \"code\": 200 }] */\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie:React.FC<Props> = (props) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, changeCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [imgUrlIsValid, tougleValidImgUrl] = useState(true);\n  const [imdbUrlIsValid, tougleValidImdbUrl] = useState(true);\n\n  const { onAdd } = props;\n\n  const formFilledEnough = Boolean(title.length\n    && imgUrl.length\n    && imdbUrl.length\n    && imdbId.length\n    && imgUrlIsValid\n    && imdbUrlIsValid);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        const newMovie = {\n          title,\n          description,\n          imgUrl,\n          imdbUrl,\n          imdbId,\n        };\n\n        onAdd(newMovie);\n\n        setTitle('');\n        setDescription('');\n        setImgUrl('');\n        setImdbUrl('');\n        setImdbId('');\n        changeCount((prev) => prev + 1);\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n        isValid\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n        isValid\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(event) => {\n          tougleValidImgUrl(false);\n\n          if (event.search(pattern) !== -1) {\n            tougleValidImgUrl(true);\n          }\n\n          setImgUrl(event);\n        }}\n        required\n        isValid={imgUrlIsValid}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(event) => {\n          tougleValidImdbUrl(false);\n\n          if (event.search(pattern) !== -1) {\n            tougleValidImdbUrl(true);\n          }\n\n          setImdbUrl(event);\n        }}\n        required\n        isValid={imdbUrlIsValid}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n        isValid\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!formFilledEnough}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [newMoviesList, addNewMovie] = useState(moviesFromServer);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={newMoviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie) => {\n          addNewMovie((prevList: Movie[]) => [...prevList, movie]);\n        }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}